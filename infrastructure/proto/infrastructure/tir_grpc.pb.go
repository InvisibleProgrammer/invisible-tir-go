// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: tir.proto

package infrastructure

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TirService_GenerateKnowledge_FullMethodName  = "/tir.TirService/GenerateKnowledge"
	TirService_EvaluateAnswer_FullMethodName     = "/tir.TirService/EvaluateAnswer"
	TirService_CorrectExplanation_FullMethodName = "/tir.TirService/CorrectExplanation"
)

// TirServiceClient is the client API for TirService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TirServiceClient interface {
	GenerateKnowledge(ctx context.Context, in *GenerateKnowledgeRequest, opts ...grpc.CallOption) (*Thematics, error)
	EvaluateAnswer(ctx context.Context, in *EvaluateRequest, opts ...grpc.CallOption) (*Answer, error)
	CorrectExplanation(ctx context.Context, in *CorrectionRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type tirServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTirServiceClient(cc grpc.ClientConnInterface) TirServiceClient {
	return &tirServiceClient{cc}
}

func (c *tirServiceClient) GenerateKnowledge(ctx context.Context, in *GenerateKnowledgeRequest, opts ...grpc.CallOption) (*Thematics, error) {
	out := new(Thematics)
	err := c.cc.Invoke(ctx, TirService_GenerateKnowledge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tirServiceClient) EvaluateAnswer(ctx context.Context, in *EvaluateRequest, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, TirService_EvaluateAnswer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tirServiceClient) CorrectExplanation(ctx context.Context, in *CorrectionRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, TirService_CorrectExplanation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TirServiceServer is the server API for TirService service.
// All implementations must embed UnimplementedTirServiceServer
// for forward compatibility
type TirServiceServer interface {
	GenerateKnowledge(context.Context, *GenerateKnowledgeRequest) (*Thematics, error)
	EvaluateAnswer(context.Context, *EvaluateRequest) (*Answer, error)
	CorrectExplanation(context.Context, *CorrectionRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedTirServiceServer()
}

// UnimplementedTirServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTirServiceServer struct {
}

func (UnimplementedTirServiceServer) GenerateKnowledge(context.Context, *GenerateKnowledgeRequest) (*Thematics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateKnowledge not implemented")
}
func (UnimplementedTirServiceServer) EvaluateAnswer(context.Context, *EvaluateRequest) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluateAnswer not implemented")
}
func (UnimplementedTirServiceServer) CorrectExplanation(context.Context, *CorrectionRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CorrectExplanation not implemented")
}
func (UnimplementedTirServiceServer) mustEmbedUnimplementedTirServiceServer() {}

// UnsafeTirServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TirServiceServer will
// result in compilation errors.
type UnsafeTirServiceServer interface {
	mustEmbedUnimplementedTirServiceServer()
}

func RegisterTirServiceServer(s grpc.ServiceRegistrar, srv TirServiceServer) {
	s.RegisterService(&TirService_ServiceDesc, srv)
}

func _TirService_GenerateKnowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateKnowledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TirServiceServer).GenerateKnowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TirService_GenerateKnowledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TirServiceServer).GenerateKnowledge(ctx, req.(*GenerateKnowledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TirService_EvaluateAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TirServiceServer).EvaluateAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TirService_EvaluateAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TirServiceServer).EvaluateAnswer(ctx, req.(*EvaluateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TirService_CorrectExplanation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CorrectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TirServiceServer).CorrectExplanation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TirService_CorrectExplanation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TirServiceServer).CorrectExplanation(ctx, req.(*CorrectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TirService_ServiceDesc is the grpc.ServiceDesc for TirService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TirService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tir.TirService",
	HandlerType: (*TirServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateKnowledge",
			Handler:    _TirService_GenerateKnowledge_Handler,
		},
		{
			MethodName: "EvaluateAnswer",
			Handler:    _TirService_EvaluateAnswer_Handler,
		},
		{
			MethodName: "CorrectExplanation",
			Handler:    _TirService_CorrectExplanation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tir.proto",
}
